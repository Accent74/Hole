Const ABC = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

Const ERR_STRING = "!ERR!"

Const TDC_DELIM = ":" ' разделитель для взаимных оборотов

Const TDC_CHAR   = "В" ' взаимные обороты
Const ST_CHAR    = "Н" ' на начало
Const EN_CHAR    = "К" ' на конец 
Const TR_CHAR    = "О" ' обороты за период
Const CHECK_STR  = "ВНКО" ' строка для проверки первого символа

Const DB_CHAR   = "Д" ' Дебет
Const CR_CHAR   = "К" ' Кредит
Const SL_CHAR   = "С" ' Сальдо
Const LY_CHAR   = "П" ' Сальдо


Dim MyCoCode, IsPrivate, MyCo, MyCoRegNo
Dim Totals, REPORT_ID

' глобальный отчет RepCommon
Dim rep, rep2
' разборщик выражений
Dim prs, prs2


'---
'
'---
Sub ash_init_data(RepFileName)
	Set Totals = CreateLibObject("Map")
	Set MyCo = Workarea.MyCompany

	MyCoCode = ash_AlignSring(MyCo.Code, 10, "0", acRight)
	MyCoRegNo = Myco.RegNo

	IsPrivate = com_getFactValue(MyCo, fctAgIsIndivid, workarea.period.start, False)

	' объект "универсальный отчет"
	Set rep = Workarea.CreateReport("RepCommon")
	Set rep2 = Workarea.CreateReport("RepCommon")

	' Создать разборщик выражений
	Set prs = CreateLibObject("Parser")
	Set prs2 = CreateLibObject("Parser")
	' и установить для него разделители "+" и "-"
	prs.SetDelimiter "+-"
	prs2.SetDelimiter "+-"

	REPORT_ID = ash_GetTaxReportID(RepFileName)

End Sub
'---
'
'---
Function ash_speriod(pos)
	Dim sDate

	sDate = formatdate2(workarea.period.start, "yyyy.mm.dd")
	ash_speriod = CharAt(sDate, Pos)
End Function
'---
'
'---
Function ash_AlignSring(StrValue, StrLen, StrChar, StrAlign)
	Dim StrAdd

	If StrValue = "" Then
		ash_AlignSring = ""
	Else
		trAdd = ""

		If Len(StrValue) < StrLen Then
			StrAdd = String(StrLen - Len(StrValue), StrChar)
	
			If StrAlign = acRight Then
				ash_AlignSring = StrAdd & StrValue
			Else
				ash_AlignSring = StrValue & StrAdd
			End If
	
		ElseIf Len(StrValue) > StrLen Then
			If StrAlign = acRight Then
				ash_AlignSring = Right(StrValue, StrLen)
			Else
				ash_AlignSring = Left(StrValue, StrLen)
			End If
		Else
			ash_AlignSring = StrValue
		End If
	End If
End Function
'---
'
'---
Function ash_getcharnavigatekey(Row, Column)
	ash_getcharnavigatekey = Row & ":" & NumAddrToChar(Column)
End Function
'---
'
'---
Sub ash_LetCellValue(AddrKey, Sh, CellValue)
	Dim Row, Col

	Row = CInt(Token(AddrKey, 1, ":"))
	Col = CharAddrToNum(Token(AddrKey, 2, ":"))
	Sh.Cell(Row, Col).Value = CellValue
End Sub
'---
'
'---
Sub ash_deleterows(sh, row, col, checkvalue)
	While sh.cell(row, col).value <> checkvalue
		sh.deleterow row
	Wend
End Sub
'---
'
'---
Function CharAddrToNum(CharValue)
	Dim i, IntValue

	IntValue = 0

	For i = 1 To Len(CharValue)
		IntValue = IntValue + InStr(ABC, Left(Right(CharValue, i), 1)) * (Len(ABC) ^ (i - 1))
	Next

	CharAddrToNum = IntValue

End Function
'---
'
'---
Function NumAddrToChar(ByVal IntValue)
	Dim i, CharValue, RestValue, n

	n = Len(ABC)
	CharValue = ""

	While IntValue > n
		RestValue = IntValue Mod n
		CharValue = CharAt(ABC, RestValue) & CharValue
		IntValue = IntValue \ n
	Wend

	NumAddrToChar = CharAt(ABC, IntValue) & CharValue

End Function
'---
'
'---
Sub ash_cleartotals(Totals)
	Dim akeys, key

	akeys = Totals.keys

	For Each key In aKeys
		Totals(Key) = 0
	Next

End Sub

'-----
'
'-----
Sub ash_SetupBarBottons(Formula, sb)
	Dim i
	
	Formula = UCase(Trim(Formula))

	If Left(Formula, 1) = "=" Then
		For i = 1 To Len(CHECK_STR)
			If InStr(Formula, CharAt(CHECK_STR, i)) <> 0 Then
				sb.EnableButtons 1 + 2 + 4
				Exit Sub
			End If
		Next
	End If

	sb.EnableButtons 1 + 4

End Sub
'------
'
'------

Function ash_GetTaxReportID(TaxRepFileName)
	Dim tReps
	Dim i
	Dim FileName
	Dim aFileName

	Set tReps = WorkArea.TaxReports

	For i = 1 To tReps.Count
		With tReps.Item(i)
			FileName = .FileName

			If InStr(FileName, "\") <> 0 Then
				aFileName = Split(FileName, "\")
				FileName = aFileName(UBound(aFileName))
			End If
		
			If FileName = TaxRepFileName Then
				ash_GetTaxReportID = .ID
				Exit Function
			End If
		End With
	Next

	ash_GetTaxReportID = 0

End Function

'---
'
'---
' функция возвращает сумму или сальдо по одному счету
Function GetRepSum(acc,se,dc, PrevPeriod)
	Dim Rp
	Dim sac    ' учитывать ли субсчета
	Dim result 

	If PrevPeriod Then
		Set Rp = Rep2
	Else
		Set Rp = Rep
	End If


	acc = Trim(acc)
	' если счет заканчивается *, то нужно учитывать субсчета
	sac = 0 ' без субсчетов
	If Right(acc,1) = "*" Then 
		acc = Left(acc,Len(acc)-1)
		sac = 1
	End If
	If se = ST_CHAR Then
		Select Case dc
			' остатки на начало
			' всегда на начало года
			Case DB_CHAR
				result = Rp.StartDb(acc, ,sac)
			Case SL_CHAR 
				result = Rp.StartSaldo(acc, ,sac)
			Case CR_CHAR
				result = Rp.StartCr(acc, ,sac)
		End Select
	ElseIf se = TR_CHAR Then
		' обороты за период
		Select Case dc
			Case DB_CHAR
				result = Rp.TurnDb(acc, ,sac)
			Case CR_CHAR
				result = Rp.TurnCr(acc, ,sac)
		End Select
	ElseIf se = EN_CHAR Then
		Select Case dc 
			' остатки на конец
     	Case DB_CHAR 
				result = Rp.EndDb(acc, ,sac)
			Case SL_CHAR
				result = Rp.EndSaldo(acc, ,sac)
			Case CR_CHAR
				result = Rp.EndCr(acc, ,sac)
		End Select
	Else
		result = ERR_STRING
	End If 
	GetRepSum = result
End Function
'-----
'
'-----
' функция вернет значение из шахматной ведомости
Function GetChessSum(Fla, PrevPeriod)
	Dim result
	Dim dba ' строка счета по дебету
	Dim cra ' строка счета по кредиту
	Dim sdb
	Dim scr
	Dim Rp

	If PrevPeriod Then
		Set Rp = rep2
	Else
		Set Rp = rep
	End If

	' сначала результат равен нулю
	result = 0.0
	' разобъем на части
	dba = Token(Fla,1,TDC_DELIM)
	cra = Token(Fla,2,TDC_DELIM)
	sdb = 0 ' без субсчетов
	scr = 0 ' без субсчетов
	If Right(dba,1) = "*" Then 
		dba = Left(dba,Len(dba)-1)
		sdb = 1 ' 1 это флажок для rep.TurnDbCr
	End If
	If Right(cra,1) = "*" Then 
		cra = Left(cra,Len(cra)-1)
		scr = 2 ' 2 это флажок для rep.TurnDbCr 
	End If

	result = rp.TurnDbCr(dba,cra, , sdb + scr)

	GetChessSum = result
End Function
'-----
'
'-----
' функция вычисляет одну часть формулы
Function GetOneSum(Fla)
	' <Н|K|О><Д|K|C><acc>[*] | <В<acc>[*]:<acc>[*]
	Dim dc
	Dim se
	Dim ac
	Dim PrevPeriod : PrevPeriod = False

	If Left(Fla, 2) = "ОП" Then
		PrevPeriod = True
		Fla = Mid(Fla, 3)
	Else
		PrevPeriod = False
	End If


	se = UCase(CharAt(Fla,1))
	If se = TDC_CHAR Then
		' взаимные обороты за период
		ac = Mid(Fla, 2)
		GetOneSum = GetChessSum(ac, PrevPeriod)
	Else
		' вычислить на начало, на конец или обороты
		dc = UCase(CharAt(Fla,2))
		ac = Mid(Fla, 3)
		GetOneSum = GetRepSum(ac,se,dc, PrevPeriod)
	End If

End Function
'---
'
'---
Sub ash_OnTranslate(Formula, ByRef Result, ByRef Skip)

	Dim i   ' счетчик
	Dim val ' промежуточная переменная
	Dim mi  ' знак (Boolean, False - плюс, True - минус)
	Dim fc  ' первый символ формулы

	fc = CharAt(Formula,2)

	If fc = "-" Then 
		fc = CharAt(Formula,3)
	ElseIf fc = "#" Then
		Skip = True ' не считать стандартным способом

		If Mid(Formula, 3, 1) = "#" Then
			result = ash_GetTaxRepSum(Mid(Formula, 4))
		Else
			result = ash_GetTaxRepNumSum(Mid(Formula, 3))
		End If

		Exit Sub
	End If

	' если строка не начинается с символов, то просто выйдем
	If InStr(CHECK_STR,fc) = 0 Then Exit Sub

	Skip = True ' не считать стандартным способом
	result = 0.0 ' результат = 0
	With prs
		If .Parse(Right(Formula,Len(Formula)-1)) Then
			' разобрали
			mi = False
			For i=1 To .Count
				' есть несколько лексем, разделенных знаками "+" и "-"
				Select Case .Token(i)
					Case "+"
						mi = False
					Case "-"
						mi = True
					Case Else
						val = GetOneSum(.Token(i))
						If IsNumeric(val) Then
							result = result + IIF(mi, -val, val)
						Else 
							result = ERR_STRING
							Exit Sub
						End If
				End Select
			Next
			' чтобы правильно работал формат,
			' результат должен быть Currency
			result = CCur(Round2(result, 2))
		Else
			' ошибка в формуле
			result = ERR_STRING
		End If
	End With
End Sub
'---
'
'---
Sub ash_OnWhatThis(Formula)
	Dim i
	Dim OneToken
	Dim fc
	Dim PopUpText
	Dim res
	Dim Sk

	Formula = Mid(Trim(Formula), 2)
	Sk = True	

	With prs2
		.Parse(Formula)

		PopUpText = ""

		For i = 1 To .Count
			OneToken = .Token(i)
			fc = charat(OneToken, 1)
			If InStr(CHECK_STR, fc) <> 0 Then
				Res = 0
				ash_OnTranslate "=" & OneToken, Res, Sk
				OneToken = Replace(OneToken, ":", "-")
				PopUpText = PopUpText & "1:" & OneToken & " = " & CStr(Res) & ":" & CStr(i + 100) & "|"

				If Res <> 0 Then
					PopUpText = PopUpText & _
									"2:Выписка из журнала:" & CStr(i + 200) & "|" & _
									"2:По корреспондентам:" & CStr(i + 300) & "|" & _
									"2:По объектам учета:" & CStr(i + 400) & "|"
				End If

			End If
		Next

		If PopUpText <> "" Then ShowPopUp PopUpText

	End With
End Sub
'---
'
'---
Sub ash_OnPopup(command)
	Dim OneFormula

	OneFormula = prs2.token(CInt(Right(Command, 2)))

	Select Case Left(Command, 1)
		Case "2"		' выписка из журнала
			ash_MakeJounList OneFormula
		Case "3"		' отчет по корреспондентам
			ash_MakeReport OneFormula, 3, 0
		Case "4"		' отчет по объектам учета
			ash_MakeReport OneFormula, 5, 2
	End Select
End Sub
'---------
'
'---------
Sub ash_MakeReport(OneFormula, ColumnType, Flag)
	Dim WR
	Dim AccCode
	Dim SubAccFlag

	Set WR = WorkArea.CreateReport("RepWizard")
	AccCode = GetCode(OneFormula, WR)

	If Right(AccCode, 1) = "*" Then
		SubAccFlag = True
		AccCode = Left(AccCode, Len(AccCode) - 1)
	Else
		SubAccFlag = False
	End If

	WR.Kind = acAccount
	WR.AccID = WorkArea.GetAccID(AccCode)
	wr.SubAcc = SubAccFlag
	WR.AddColumn ColumnType

	Wr.SetRemMode True, 2, Flag
	Wr.SetRemMode False, 2, Flag
	Wr.SetTurnMode True, 2, Flag
	Wr.SetTurnMode False, 2, Flag

	If WR.Build Then
		wr.MakeSheet
	Else
		MsgBox "Ошибка при построении отчета.", vbCritical, "Акцент 7.0"
	End If
End Sub
'---
'
'---
Sub ash_MakeJounList(OneFormula)
	Dim AccCode, AccID
	Dim SubAccFlag 
	Dim RepJrn
	Dim i

	Set RepJrn = Workarea.CreateReport("RepSubList")
	AccCode = GetCode(OneFormula, RepJrn)

	If Right(AccCode, 1) = "*" Then
		SubAccFlag = True
		AccCode = Left(AccCode, Len(AccCode) - 1)
	Else
		SubAccFlag = False
	End If

	AccID = WorkArea.GetAccID(AccCode)
	RepJrn.Kind = acAccount
	RepJrn.KindID = AccID

	RepJrn.Build

	If SubAccFlag Then
		With WorkArea.Account(AccID).Nested
			For i = 1 To .Count
				RepJrn.Kind = acAccount
				RepJrn.KindID = .Item(i).ID
				RepJrn.Build			
			Next
		End With
	End If

	RepJrn.MakeSheet

End Sub
'---------
'
'---------
Function GetCode(OneFormula, Rpt)
	If Left(OneFormula, 2) = "ОП" Then
		GetCode = Mid(OneFormula, 5)
		With Rpt.Period
			.Start = Rep2.Period.Start
			.End = Rep2.Period.End
		End With
	Else
		GetCode = Mid(OneFormula, 3)

		With Rpt.Period
			.Start = Rep.Period.Start
			.End = Rep.Period.End
		End With

	End If
End Function
'---------
'
'---------

Function ash_GetTaxRepSum(Fla) 'за отчетный месяц
	Dim TaxRep 
	Dim ZvitMonth 

	Set TaxRep = Workarea.CreateReport("RepTax")
	TaxRep.TaxID = REPORT_ID
	TaxRep.Year = Rep.Period.Year

	ZvitMonth = Month(DateAdd("d", -1, Rep.Period.End))

	If ZvitMonth > 0 Then 
		ash_GetTaxRepSum = CCur(Round2(TaxRep.MonthValue(ZvitMonth, Fla), 0))
	Else
		ash_GetTaxRepSum = CCur(0.0)
	End If

End Function
'---------
'
'---------

Function ash_GetTaxRepNumSum(Fla) 'за все месяцы с января до отчетного включительно
	Dim TaxRep 
	Dim ZvitMonth 

	Set TaxRep = Workarea.CreateReport("RepTax")
	TaxRep.TaxID = REPORT_ID
	TaxRep.Year = Rep.Period.Year

	ZvitMonth = Month(DateAdd("d", -1, Rep.Period.End))

	If ZvitMonth > 0 Then 
		ash_GetTaxRepNumSum = CCur(Round2(TaxRep.NumMonthValue(ZvitMonth, Fla), 0))
	Else
		ash_GetTaxRepNumSum = CCur(0.0)
	End If

End Function
'---
'
'---
' Формулы, которые может вводить бухгалтер, представляют собой 
' простые выражения (без скобок), каждый элемент которых состоит из:
'    1) Символа начала (Н), конца К), оборотов(О)
'    2) Символа дебета (Д) или кредита (К)
'    3) Номера счета. Звездочка в конце означает учет субсчетов
' Дополнительно, поддерживается возможность получения взаимных оборотов
' между счетами (из шахматной ведомости), элемент которых состоит из:
'    1) Символа взаимных оборотов (В)
'    2) Номера счета по дебету (возможно со звездочкой)
'    3) Разделителя в виде двоеточия (:)
'    4) Номера счета по кредиту (возможно со звездочкой)
' Первые две буквы "ОП" после знака равно в формуле означают, что значение будет вычисляться в периоде с начала года и до конца отчетного месяца.
'
' Например, формула
'    =НД10* + КК11 - НС12* + В14*:15*
' означает, что нужно к начальному сальдо по дебету 10-x счетов прибавить
' конечное сальдо по кредиту 11 счета, вычесть из него сальдо 12-x счетов, а затем
' прибавить обороты с дебета 14-x счетов в кредит 15-x счетов
' 
' Для разбора формул используется специальный объект "Parser",
' который находится в библиотеке "Impact Common 6.0"
'
' Дополнительно, при запуске отчета устанавливается период начиная с начала года
' и заканчивая окончанием заданного квартала.
